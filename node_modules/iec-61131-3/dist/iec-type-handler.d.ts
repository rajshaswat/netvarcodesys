/// <reference types="node" />
import type { EnumDataType, EnumEntry, EnumValue, IecType, IteratedIecType } from './types/types';
/**
 * Base abstract type
 */
declare abstract class TypeBase implements Partial<IecType> {
    type: string;
    byteLength: number;
    /**
     * Shorthand for variableIterator()
     * --> for(const variable of dataType) {...}
     */
    [Symbol.iterator](): IterableIterator<IteratedIecType>;
    /**
     * Iterator for looping through all variables in memory order
     * NOTE: Array variable is _one_ variable, see elementIterator() for looping each array element
     *
     * Usage: for(const variable of dataType.variableIterator()) {...}
     * Shorthand for this is: for(const variable of dataType) {...}
     */
    variableIterator(): IterableIterator<IteratedIecType>;
    /**
     * Iterator for looping through all variables (and their array elements) in memory order
     * NOTE: Each array element is yield separately unlike with variableIterator()
     *
     * Usage: for(const variable of dataType.elementIterator()) {...}
     *
     */
    elementIterator(): IterableIterator<IteratedIecType>;
}
/**
 * IEC 61131-3 type: STRUCT
 */
export declare class STRUCT extends TypeBase implements IecType {
    type: string;
    /**
     * STRUCT children data types
     */
    children?: Record<string, IecType | never>;
    constructor(children?: Record<string, IecType | never>);
    convertToBuffer(data: Record<string, unknown>): Buffer;
    convertFromBuffer(data: Buffer): Record<string, unknown>;
    getDefault(): Record<string, unknown>;
}
/**
 * IEC 61131-3 type: UNION
 */
export declare class UNION extends TypeBase implements IecType {
    type: string;
    /**
     * UNION children data types
     */
    children?: Record<string, IecType | never>;
    constructor(children?: Record<string, IecType | never>);
    convertToBuffer(data: Record<string, unknown>): Buffer;
    convertFromBuffer(data: Buffer): Record<string, unknown>;
    getDefault(): Record<string, unknown>;
}
/**
 * IEC 61131-3 type: ARRAY
 * Handles 1..3 dimensional arrays
 */
export declare class ARRAY extends TypeBase implements IecType {
    type: string;
    dataType: IecType;
    dimensions: number[];
    totalSize: number;
    /**
     * Constructor for array
     * @param dataType Data type of the array (example: iec.INT)
     * @param dimensions If 1-dimensional array: Array dimension (size) as number. If multi-dimensional array, array dimensions as array (like [1, 10, 5])
     */
    constructor(dataType: IecType, dimensions: number | number[]);
    convertToBuffer(data: unknown[]): Buffer;
    convertFromBuffer(data: Buffer): unknown[];
    getDefault(): unknown[];
}
/**
 * IEC 61131-3 type: ENUM
 */
export declare class ENUM extends TypeBase implements IecType {
    type: string;
    definition: Record<string, number>;
    dataType: IecType;
    constructor(definition: Record<string, number>, dataType?: EnumDataType);
    convertToBuffer(data: EnumValue): Buffer;
    convertFromBuffer(data: Buffer): EnumEntry;
    getDefault(): EnumEntry;
    findEnumEntryByValue(value: number): EnumEntry | undefined;
}
/**
 * IEC 61131-3 type: STRING
 * Default length 80 characters
 */
export declare class STRING extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    /**
     * Constructor for string
     * @param length Length of the string variable (similar as in the PLC), default is 80
     */
    constructor(length?: number);
    convertToBuffer(data: string): Buffer;
    convertFromBuffer(data: Buffer): string;
    getDefault(): string;
}
/**
 * IEC 61131-3 type: WSTRING
 * Default length 80 characters
 */
export declare class WSTRING extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    /**
     * Constructor for wstring
     * @param length Length of the string variable (similar as in the PLC), default is 80
     */
    constructor(length?: number);
    convertToBuffer(data: string): Buffer;
    convertFromBuffer(data: Buffer): string;
    getDefault(): string;
}
/**
 * IEC 61131-3 type: BOOL (1 byte)
 */
export declare class BOOL extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: boolean): Buffer;
    convertFromBuffer(data: Buffer): boolean;
    getDefault(): boolean;
}
/**
 * IEC 61131-3 type: USINT (1 byte)
 */
export declare class USINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: BYTE (1 byte)
 */
export declare class BYTE extends USINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: SINT (1 byte)
 */
export declare class SINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: UINT (2 bytes)
 */
export declare class UINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: WORD (2 bytes)
 */
export declare class WORD extends UINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: INT (2 bytes)
 */
export declare class INT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: DINT (4 bytes)
 */
export declare class DINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: UDINT (4 bytes)
 */
export declare class UDINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: DWORD (4 bytes)
 */
export declare class DWORD extends UDINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: TIME (4 bytes)
 */
export declare class TIME extends UDINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: TOD (4 bytes)
 */
export declare class TOD extends UDINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: TIME_OF_DAY (4 bytes)
 */
export declare class TIME_OF_DAY extends TOD implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: DT (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare class DT extends UDINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: DATE_AND_TIME (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare class DATE_AND_TIME extends DT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: DATE (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare class DATE extends UDINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: REAL (4 bytes)
 */
export declare class REAL extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: LREAL (4 bytes)
 */
export declare class LREAL extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: number): Buffer;
    convertFromBuffer(data: Buffer): number;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: ULINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare class ULINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: bigint): Buffer;
    convertFromBuffer(data: Buffer): bigint;
    getDefault(): number;
}
/**
 * IEC 61131-3 type: LWORD (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare class LWORD extends ULINT implements IecType {
    type: string;
}
/**
 * IEC 61131-3 type: LINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare class LINT extends TypeBase implements IecType {
    type: string;
    byteLength: number;
    convertToBuffer(data: bigint): Buffer;
    convertFromBuffer(data: Buffer): bigint;
    getDefault(): number;
}
export {};
