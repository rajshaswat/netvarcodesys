import type { IecType } from './types/types';
/**
 * Exporting IecType interface
 */
export type { IecType } from './types/types';
/**
 * Exporting all IEC data types
 */
export * from './iec-types';
/**
 * Converts given PLC data type declaration(s) to IEC data type.
 * - If only one declaration given, it's selected automatically.
 * - If multiple given, top-level type needs to be given as 2nd parameter.
 * - Additionally, pre-defined IEC data types can be provided as 3rd parameter {name: type}
 *
 * @param declarations PLC IEC-61131-3 struct type declarations (one or multiple)
 * @param topLevelDataType If multiple struct type declarations given, the top-level struct type name needs to be provided (= which struct should be returned as IEC type)
 * @param providedTypes Object containing struct data type names and their IEC types if required (if some structs are defined somewhere else) - like {'ST_Example': STRUCT(...)}
 * @returns IEC data type object
 */
export declare const fromString: (declarations: string, topLevelDataType?: string | undefined, providedTypes?: Record<string, IecType> | undefined) => IecType;
