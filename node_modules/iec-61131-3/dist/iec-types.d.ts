import type { EnumDataType, IecType } from './types/types';
import * as handler from './iec-type-handler';
/**
 * IEC 61131-3 type: STRUCT - Handles STRUCT data type, provide struct children as object
 *
 * @param children Children variables as IEC object, like: `{intVal: INT, boolVal: BOOL, structVal: STRUCT({...})}`
 * @returns IecType object
 */
export declare const STRUCT: (children?: Record<string, IecType> | undefined) => handler.STRUCT;
/**
 * IEC 61131-3 type: UNION - Handles UNION data type, provide union children as object
 *
 * @param children Children variables as IEC object, like: `{intVal: INT, boolVal: BOOL, structVal: STRUCT({...})}`
 * @returns IecType object
 */
export declare const UNION: (children?: Record<string, IecType> | undefined) => handler.UNION;
/**
 * IEC 61131-3 type: ARRAY - Handles 1..3 dimensional arrays.
 *
 * Example with 1-dimensional INT array of 10 values: `ARRAY(INT, 10)`

 * Example with 2-dimensional REAL array of 2*5 values: `ARRAY(REAL, [2, 5])`
 *
 * @param dataType Data type of the array (example: INT)
 * @param dimensions Array dimension as number (if 1-dimensional array). If multi-dimensional, array dimensions as array of numbers (like `[2, 5]`)
 */
export declare const ARRAY: (dataType: IecType, dimensions: number | number[]) => handler.ARRAY;
/**
 * IEC 61131-3 type: ENUM
 * Handles enumeration types with different data types
 *
 * @param definition Enumeration definition as object (like `{key1: 1, key2: 2}`)
 * @param dataType Data type of the ENUM (default is iec.INT)
 * @returns
 */
export declare const ENUM: (definition: Record<string, number>, dataType?: EnumDataType | undefined) => handler.ENUM;
/**
 * IEC 61131-3 type: STRING - Default length 80 characters
 * @param length Length of the string variable (similar as in the PLC), default is 80
 */
export declare const STRING: (length?: number | undefined) => handler.STRING;
/**
 * IEC 61131-3 type: WSTRING - Default length 80 characters
 * @param length Length of the string variable (similar as in the PLC), default is 80
 */
export declare const WSTRING: (length?: number | undefined) => handler.WSTRING;
/**
 * IEC 61131-3 type: BOOL (1 byte)
 */
export declare const BOOL: handler.BOOL;
/**
 * IEC 61131-3 type: USINT (1 byte)
 */
export declare const USINT: handler.USINT;
/**
 * IEC 61131-3 type: BYTE (1 byte)
 */
export declare const BYTE: handler.BYTE;
/**
 * IEC 61131-3 type: SINT (1 byte)
 */
export declare const SINT: handler.SINT;
/**
 * IEC 61131-3 type: UINT (2 bytes)
 */
export declare const UINT: handler.UINT;
/**
 * IEC 61131-3 type: WORD (2 bytes)
 */
export declare const WORD: handler.WORD;
/**
 * IEC 61131-3 type: INT (2 bytes)
 */
export declare const INT: handler.INT;
/**
 * IEC 61131-3 type: DINT (4 bytes)
 */
export declare const DINT: handler.DINT;
/**
 * IEC 61131-3 type: UDINT (4 bytes)
 */
export declare const UDINT: handler.UDINT;
/**
 * IEC 61131-3 type: DWORD (4 bytes)
 */
export declare const DWORD: handler.DWORD;
/**
 * IEC 61131-3 type: TIME (4 bytes)
 */
export declare const TIME: handler.TIME;
/**
 * IEC 61131-3 type: TOD (4 bytes)
 */
export declare const TOD: handler.TOD;
/**
 * IEC 61131-3 type: TIME_OF_DAY (4 bytes)
 */
export declare const TIME_OF_DAY: handler.TIME_OF_DAY;
/**
 * IEC 61131-3 type: DT (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare const DT: handler.DT;
/**
 * IEC 61131-3 type: DATE_AND_TIME (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare const DATE_AND_TIME: handler.DATE_AND_TIME;
/**
 * IEC 61131-3 type: DATE (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
export declare const DATE: handler.DATE;
/**
 * IEC 61131-3 type: REAL (4 bytes)
 */
export declare const REAL: handler.REAL;
/**
 * IEC 61131-3 type: LREAL (4 bytes)
 */
export declare const LREAL: handler.LREAL;
/**
 * IEC 61131-3 type: ULINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare const ULINT: handler.ULINT;
/**
 * IEC 61131-3 type: LWORD (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare const LWORD: handler.LWORD;
/**
 * IEC 61131-3 type: LINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
export declare const LINT: handler.LINT;
