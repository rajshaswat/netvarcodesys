"use strict";
/*
https://github.com/jisotalo/iec-61131-3

Copyright (c) 2021 Jussi Isotalo <j.isotalo91@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LINT = exports.LWORD = exports.ULINT = exports.LREAL = exports.REAL = exports.DATE = exports.DATE_AND_TIME = exports.DT = exports.TIME_OF_DAY = exports.TOD = exports.TIME = exports.DWORD = exports.UDINT = exports.DINT = exports.INT = exports.WORD = exports.UINT = exports.SINT = exports.BYTE = exports.USINT = exports.BOOL = exports.WSTRING = exports.STRING = exports.ENUM = exports.ARRAY = exports.UNION = exports.STRUCT = void 0;
const iconv_lite_1 = __importDefault(require("iconv-lite"));
/**
 * Base abstract type
 */
class TypeBase {
    constructor() {
        this.type = '';
        this.byteLength = 0;
    }
    /**
     * Shorthand for variableIterator()
     * --> for(const variable of dataType) {...}
     */
    *[Symbol.iterator]() {
        let startIndex = 0;
        //Helper recursive function
        function* iterate(dt) {
            if (dt.children === undefined) {
                yield {
                    name: undefined,
                    startIndex,
                    type: dt
                };
                startIndex += dt.byteLength;
            }
            else {
                for (const name in dt.children) {
                    const type = dt.children[name];
                    if (type.children !== undefined) {
                        //There are children -> go deeper
                        yield* iterate(type);
                    }
                    else {
                        yield {
                            name,
                            startIndex,
                            type
                        };
                        startIndex += type.byteLength;
                    }
                }
            }
        }
        yield* iterate(this);
    }
    /**
     * Iterator for looping through all variables in memory order
     * NOTE: Array variable is _one_ variable, see elementIterator() for looping each array element
     *
     * Usage: for(const variable of dataType.variableIterator()) {...}
     * Shorthand for this is: for(const variable of dataType) {...}
     */
    *variableIterator() {
        yield* this[Symbol.iterator]();
    }
    /**
     * Iterator for looping through all variables (and their array elements) in memory order
     * NOTE: Each array element is yield separately unlike with variableIterator()
     *
     * Usage: for(const variable of dataType.elementIterator()) {...}
     *
     */
    *elementIterator() {
        function* iterateArrayLevel(dt, startIndex, name) {
            for (let i = 0; i < dt.totalSize; i++) {
                if (dt.dataType instanceof ARRAY) {
                    yield* iterateArrayLevel(dt.dataType, startIndex + dt.dataType.byteLength * i, `${name}[${i}]`);
                }
                else {
                    yield {
                        name: `${name}[${i}]`,
                        startIndex: startIndex + dt.dataType.byteLength * i,
                        type: dt.dataType
                    };
                }
            }
        }
        for (const variable of this) {
            if (variable.type instanceof ARRAY) {
                yield* iterateArrayLevel(variable.type, variable.startIndex, variable.name);
            }
            else {
                yield variable;
            }
        }
    }
}
/**
 * IEC 61131-3 type: STRUCT
 */
class STRUCT extends TypeBase {
    constructor(children) {
        super();
        this.type = 'STRUCT';
        this.children = children;
        //Calculating struct size
        for (const key in this.children) {
            if (typeof this.children[key] !== 'object' || this.children[key].byteLength === undefined) {
                throw new Error(`Struct member ${key} is not valid IEC data type - Did you remember to use () with some data types that require it (example with STRING())?`);
            }
            this.byteLength += this.children[key].byteLength;
        }
    }
    convertToBuffer(data) {
        if (!data)
            return Buffer.alloc(0);
        const buffer = Buffer.alloc(this.byteLength);
        let pos = 0;
        for (const key in this.children) {
            const converted = this.children[key].convertToBuffer(data[key]);
            converted.copy(buffer, pos);
            pos += converted.byteLength;
        }
        return buffer;
    }
    convertFromBuffer(data) {
        const obj = {};
        let pos = 0;
        for (const key in this.children) {
            obj[key] = this.children[key].convertFromBuffer(data.slice(pos, pos + this.children[key].byteLength));
            pos += this.children[key].byteLength;
        }
        return obj;
    }
    getDefault() {
        const obj = {};
        for (const key in this.children) {
            obj[key] = this.children[key].getDefault();
        }
        return obj;
    }
}
exports.STRUCT = STRUCT;
/**
 * IEC 61131-3 type: UNION
 */
class UNION extends TypeBase {
    constructor(children) {
        super();
        this.type = 'UNION';
        this.children = children;
        //Calculating union size (= biggest child)
        for (const key in this.children) {
            if (typeof this.children[key] !== 'object' || this.children[key].byteLength === undefined) {
                throw new Error(`Struct member ${key} is not valid IEC data type - Did you remember to use () with some data types that require it (example with STRING())?`);
            }
            if (this.children[key].byteLength > this.byteLength)
                this.byteLength = this.children[key].byteLength;
        }
    }
    convertToBuffer(data) {
        if (!data)
            return Buffer.alloc(0);
        //As UNION type member all are located in same memory, it's not that easy
        //For now: Use the last given object key value
        const buffer = Buffer.alloc(this.byteLength);
        for (const key in this.children) {
            if (data[key] === undefined)
                continue;
            //There is only one value allowed so quit after this
            const converted = this.children[key].convertToBuffer(data[key]);
            converted.copy(buffer, 0);
        }
        return buffer;
    }
    convertFromBuffer(data) {
        const obj = {};
        for (const key in this.children) {
            obj[key] = this.children[key].convertFromBuffer(data.slice(0, this.children[key].byteLength));
        }
        return obj;
    }
    getDefault() {
        const obj = {};
        for (const key in this.children) {
            obj[key] = this.children[key].getDefault();
        }
        return obj;
    }
}
exports.UNION = UNION;
/**
 * IEC 61131-3 type: ARRAY
 * Handles 1..3 dimensional arrays
 */
class ARRAY extends TypeBase {
    /**
     * Constructor for array
     * @param dataType Data type of the array (example: iec.INT)
     * @param dimensions If 1-dimensional array: Array dimension (size) as number. If multi-dimensional array, array dimensions as array (like [1, 10, 5])
     */
    constructor(dataType, dimensions) {
        super();
        this.type = 'ARRAY';
        this.dimensions = [];
        this.totalSize = 0;
        this.dataType = dataType;
        if (Array.isArray(dimensions)) {
            this.dimensions = dimensions;
        }
        else {
            this.dimensions.push(dimensions);
        }
        //Calculating total size
        this.totalSize = this.dimensions.reduce((total, size) => total * size, 1);
        this.byteLength = this.totalSize * dataType.byteLength;
    }
    convertToBuffer(data) {
        if (!data)
            return Buffer.alloc(0);
        const buffer = Buffer.alloc(this.byteLength);
        let pos = 0;
        //Recursive handling of array dimensions
        //Loops dimensions until we found the last one and then reads the data
        const parseArray = (data, arrayDimension) => {
            for (let dimension = 0; dimension < this.dimensions[arrayDimension]; dimension++) {
                if (this.dimensions[arrayDimension + 1]) {
                    //More dimensions available -> go deeper
                    parseArray(data[dimension], arrayDimension + 1);
                }
                else {
                    //This is the final dimension -> we have actual data
                    const converted = this.dataType.convertToBuffer(data[dimension]);
                    converted.copy(buffer, pos);
                    pos += converted.byteLength;
                }
            }
        };
        //Start from 1st dimension
        parseArray(data, 0);
        return buffer;
    }
    convertFromBuffer(data) {
        let pos = 0;
        //Recursive handling of array dimensions
        //Loops dimensions until we found the last one and then fills with data
        const parseArray = (arrayDimension) => {
            const result = [];
            for (let dimension = 0; dimension < this.dimensions[arrayDimension]; dimension++) {
                if (this.dimensions[arrayDimension + 1]) {
                    //More dimensions available -> go deeper
                    result.push(parseArray(arrayDimension + 1));
                }
                else {
                    //This is the final dimension -> we have actual data
                    result.push(this.dataType.convertFromBuffer(data.slice(pos, pos + this.dataType.byteLength)));
                    pos += this.dataType.byteLength;
                }
            }
            return result;
        };
        //Start from 1st dimension
        return parseArray(0);
    }
    getDefault() {
        //Recursive parsing of array dimensions
        //Loops dimensions until we found the last one and then fills with data
        const parseArray = (arrayDimension) => {
            const result = [];
            for (let dimension = 0; dimension < this.dimensions[arrayDimension]; dimension++) {
                if (this.dimensions[arrayDimension + 1]) {
                    //More dimensions available -> go deeper
                    result.push(parseArray(arrayDimension + 1));
                }
                else {
                    //This is the final dimension -> we have actual data
                    result.push(this.dataType.getDefault());
                }
            }
            return result;
        };
        //Start from 1st dimension
        return parseArray(0);
    }
}
exports.ARRAY = ARRAY;
/**
 * IEC 61131-3 type: ENUM
 */
class ENUM extends TypeBase {
    constructor(definition, dataType) {
        super();
        this.type = 'ENUM';
        this.definition = definition;
        this.dataType = dataType ? dataType : new INT();
        this.byteLength = this.dataType.byteLength;
    }
    convertToBuffer(data) {
        if (!data)
            return Buffer.alloc(0);
        if (typeof data === 'string') {
            //Enumeration name given as string
            const found = Object.keys(this.definition).find(key => key.toLowerCase() === data.toLowerCase());
            if (found) {
                return this.dataType.convertToBuffer(this.definition[found]);
            }
            throw new Error('Input parameter is not valid for ENUM');
        }
        else if (typeof data === 'number') {
            //Enumeration value given as number
            return this.dataType.convertToBuffer(data);
        }
        else if (typeof data === 'object' && data.value) {
            //Object given with value key
            return this.dataType.convertToBuffer(data);
        }
        else if (typeof data === 'object' && data.name) {
            //Object given with name key
            const found = Object.keys(this.definition).find(key => data.name && key.toLowerCase() === data.name.toLowerCase());
            if (found) {
                return this.dataType.convertToBuffer(this.definition[found]);
            }
            throw new Error('Input parameter is not valid for ENUM');
        }
        else {
            throw new Error('Input parameter is not valid for ENUM (number, string or object with { value })');
        }
    }
    convertFromBuffer(data) {
        //First, converting buffer to number
        const value = this.dataType.convertFromBuffer(data);
        const entry = this.findEnumEntryByValue(value);
        if (entry)
            return entry;
        //Not found
        return {
            name: undefined,
            value
        };
    }
    getDefault() {
        //Codeys initializes the value with the first enumeration component
        //Use it, unless there are none
        const keys = Object.keys(this.definition);
        if (keys.length > 0) {
            return {
                name: keys[0],
                value: this.definition[keys[0]]
            };
        }
        else {
            //No entries? Use data type default value
            const value = this.dataType.getDefault();
            //Do we have enumeration entry for default value?
            const entry = this.findEnumEntryByValue(value);
            if (entry)
                return entry;
            //Not found
            return {
                name: undefined,
                value
            };
        }
    }
    findEnumEntryByValue(value) {
        for (const key in this.definition) {
            if (this.definition[key] === value) {
                //Found
                return {
                    name: key,
                    value: value
                };
            }
        }
        //Not found
        return undefined;
    }
}
exports.ENUM = ENUM;
/**
 * IEC 61131-3 type: STRING
 * Default length 80 characters
 */
class STRING extends TypeBase {
    /**
     * Constructor for string
     * @param length Length of the string variable (similar as in the PLC), default is 80
     */
    constructor(length = 80) {
        super();
        this.type = 'STRING';
        this.byteLength = 80;
        //Adding string end delimeter
        this.byteLength = length + 1;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        iconv_lite_1.default.encode(data, 'cp1252').copy(buffer);
        return buffer;
    }
    convertFromBuffer(data) {
        return trimPlcString(iconv_lite_1.default.decode(data, 'cp1252'));
    }
    getDefault() {
        return '';
    }
}
exports.STRING = STRING;
/**
 * IEC 61131-3 type: WSTRING
 * Default length 80 characters
 */
class WSTRING extends TypeBase {
    /**
     * Constructor for wstring
     * @param length Length of the string variable (similar as in the PLC), default is 80
     */
    constructor(length = 80) {
        super();
        this.type = 'WSTRING';
        this.byteLength = 160;
        //Adding string end delimeter
        this.byteLength = length * 2 + 2;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        iconv_lite_1.default.encode(data, 'ucs2').copy(buffer);
        return buffer;
    }
    convertFromBuffer(data) {
        return trimPlcString(iconv_lite_1.default.decode(data, 'ucs2'));
    }
    getDefault() {
        return '';
    }
}
exports.WSTRING = WSTRING;
/**
 * IEC 61131-3 type: BOOL (1 byte)
 */
class BOOL extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'BOOL';
        this.byteLength = 1;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeUInt8(data ? 1 : 0);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readUInt8() ? true : false;
    }
    getDefault() {
        return false;
    }
}
exports.BOOL = BOOL;
/**
 * IEC 61131-3 type: USINT (1 byte)
 */
class USINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'USINT';
        this.byteLength = 1;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeUInt8(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readUInt8();
    }
    getDefault() {
        return 0;
    }
}
exports.USINT = USINT;
/**
 * IEC 61131-3 type: BYTE (1 byte)
 */
class BYTE extends USINT {
    constructor() {
        super(...arguments);
        this.type = 'BYTE';
    }
}
exports.BYTE = BYTE;
/**
 * IEC 61131-3 type: SINT (1 byte)
 */
class SINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'SINT';
        this.byteLength = 1;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeInt8(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readInt8();
    }
    getDefault() {
        return 0;
    }
}
exports.SINT = SINT;
/**
 * IEC 61131-3 type: UINT (2 bytes)
 */
class UINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'UINT';
        this.byteLength = 2;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeUInt16LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readUInt16LE();
    }
    getDefault() {
        return 0;
    }
}
exports.UINT = UINT;
/**
 * IEC 61131-3 type: WORD (2 bytes)
 */
class WORD extends UINT {
    constructor() {
        super(...arguments);
        this.type = 'WORD';
    }
}
exports.WORD = WORD;
/**
 * IEC 61131-3 type: INT (2 bytes)
 */
class INT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'INT';
        this.byteLength = 2;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeInt16LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readInt16LE();
    }
    getDefault() {
        return 0;
    }
}
exports.INT = INT;
/**
 * IEC 61131-3 type: DINT (4 bytes)
 */
class DINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'DINT';
        this.byteLength = 4;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeInt32LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readInt32LE();
    }
    getDefault() {
        return 0;
    }
}
exports.DINT = DINT;
/**
 * IEC 61131-3 type: UDINT (4 bytes)
 */
class UDINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'UDINT';
        this.byteLength = 4;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeUInt32LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readUInt32LE();
    }
    getDefault() {
        return 0;
    }
}
exports.UDINT = UDINT;
/**
 * IEC 61131-3 type: DWORD (4 bytes)
 */
class DWORD extends UDINT {
    constructor() {
        super(...arguments);
        this.type = 'DWORD';
    }
}
exports.DWORD = DWORD;
/**
 * IEC 61131-3 type: TIME (4 bytes)
 */
class TIME extends UDINT {
    constructor() {
        super(...arguments);
        this.type = 'TIME';
    }
}
exports.TIME = TIME;
/**
 * IEC 61131-3 type: TOD (4 bytes)
 */
class TOD extends UDINT {
    constructor() {
        super(...arguments);
        this.type = 'TOD';
    }
}
exports.TOD = TOD;
/**
 * IEC 61131-3 type: TIME_OF_DAY (4 bytes)
 */
class TIME_OF_DAY extends TOD {
    constructor() {
        super(...arguments);
        this.type = 'TIME_OF_DAY';
    }
}
exports.TIME_OF_DAY = TIME_OF_DAY;
/**
 * IEC 61131-3 type: DT (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
class DT extends UDINT {
    constructor() {
        super(...arguments);
        this.type = 'DT';
    }
}
exports.DT = DT;
/**
 * IEC 61131-3 type: DATE_AND_TIME (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
class DATE_AND_TIME extends DT {
    constructor() {
        super(...arguments);
        this.type = 'DATE_AND_TIME';
    }
}
exports.DATE_AND_TIME = DATE_AND_TIME;
/**
 * IEC 61131-3 type: DATE (4 bytes)
 * TODO: Conversion to Javascript Date object?
 */
class DATE extends UDINT {
    constructor() {
        super(...arguments);
        this.type = 'DATE';
    }
}
exports.DATE = DATE;
/**
 * IEC 61131-3 type: REAL (4 bytes)
 */
class REAL extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'REAL';
        this.byteLength = 4;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeFloatLE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readFloatLE();
    }
    getDefault() {
        return 0;
    }
}
exports.REAL = REAL;
/**
 * IEC 61131-3 type: LREAL (4 bytes)
 */
class LREAL extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'LREAL';
        this.byteLength = 8;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeDoubleLE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readDoubleLE();
    }
    getDefault() {
        return 0;
    }
}
exports.LREAL = LREAL;
/**
 * IEC 61131-3 type: ULINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
class ULINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'ULINT';
        this.byteLength = 8;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeBigUInt64LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readBigUInt64LE();
    }
    getDefault() {
        return 0;
    }
}
exports.ULINT = ULINT;
/**
 * IEC 61131-3 type: LWORD (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
class LWORD extends ULINT {
    constructor() {
        super(...arguments);
        this.type = 'LWORD';
    }
}
exports.LWORD = LWORD;
/**
 * IEC 61131-3 type: LINT (8 bytes)
 * TODO: Requires Node.js that supports BigInt
 */
class LINT extends TypeBase {
    constructor() {
        super(...arguments);
        this.type = 'LINT';
        this.byteLength = 8;
    }
    convertToBuffer(data) {
        const buffer = Buffer.alloc(this.byteLength);
        buffer.writeBigInt64LE(data);
        return buffer;
    }
    convertFromBuffer(data) {
        return data.readBigInt64LE();
    }
    getDefault() {
        return 0;
    }
}
exports.LINT = LINT;
/**
 * Trims the given PLC string until end mark (\0, 0 byte) is found
 * (= removes empty bytes from end of the string)
 * @param {string} plcString String to trim
 *
 * @returns {string} Trimmed string
 */
const trimPlcString = (plcString) => {
    let parsedStr = '';
    for (let i = 0; i < plcString.length; i++) {
        if (plcString.charCodeAt(i) === 0)
            break;
        parsedStr += plcString[i];
    }
    return parsedStr;
};
